#!/usr/bin/env ruby
require 'benchmark'
require File.expand_path(File.join(File.dirname(__FILE__), %w[.. lib devlog.rb]))
require "active_support/configurable"

USAGE = <<-EOF
#{Devlog.display_version}
This software is intended to parse and present information within devlog.markdown development logs. It also helps You to write the devlog.

#{'Use it as You'.green} #{'dodo'.pur}.

Using with a file, for parsing and seeing the information summary:

  #{'devlog'.red} /path/to/devlog.markdown

or in a folder with a 'devlog.markdown' file in it:

  #{'devlog'.green}

write commands for the current folder, the top three:

  #{'devlog'.green} b ~ starts coding session
  #{'devlog'.green} e ~ stops coding session
  #{'devlog'.green} save ~ save info.markdown, commit & push git repo
  #{'devlog'.green} saver ~ save info.markdown, copy to README.markdown, commit & push git repo

  #{'devlog'.green} i ~ save info.markdown
  #{'devlog'.green} s ~ status of coding session
  #{'devlog'.green} commit ~ commit git repo
  #{'devlog'.green} push ~ push git repo

exporting devlog into a book, which can be read top down, like normal books:

  #{'devlog'.green} x ~ exports into devlog.txt

reporting devlog as a timesheet:

  #{'devlog'.green} w ~ export the current weekly timesheet into a html page and convert that into PDF
EOF

# arguments
$:.unshift File.join(File.dirname(__FILE__))
@in_file_or_cmd = ARGV[0]
@argument = ARGV[1] ? ARGV[1].to_i : 0

def print_backtrace(exception)
  exception.backtrace.join("\n\t").to_s.blue
end

def print_usage
  puts USAGE
end

def parse_now(devlog_file = 'devlog.markdown', msg = '')
  puts msg
  t = parse_devlog_now(devlog_file)
  puts t.validation_string
  puts t.to_info_string
  puts is_session_open(devlog_file) ? "\nSession is open...".yellow : "\nNo open session.".green
  t
end

def export_now(devlog_file = 'devlog.markdown', msg = '')
  puts msg
  exported_file = export_devlog_now(devlog_file)
  puts "\nExported to #{exported_file}.".yellow
end

include Devlog

def dodo
  load_settings('.devlog.yml')
  tz = devlog_timezone_setting
  puts "Timezone: {tz}"
  default_devlog_file = devlog_file_setting
  time = Benchmark.realtime do
    if @in_file_or_cmd =~ /.(markdown|md)$/ # devlog_file is passed directly via CLI
      @settings = nil
      parse_now(@in_file_or_cmd, "Parsing #{@in_file_or_cmd}!".red)
    elsif @in_file_or_cmd == 'help'
      print_usage
    elsif @in_file_or_cmd == 'x'
      export_now(default_devlog_file, "Exporting #{default_devlog_file}...".green)
    elsif @in_file_or_cmd == 'w'
      weekly_pdf(parse_now(default_devlog_file, "Parsing #{default_devlog_file}...".green), @argument)
    elsif @in_file_or_cmd == 'commit'
      `git commit -am 'devlog';git push`
    elsif @in_file_or_cmd == 'b'
      puts "CodingSession::BEGIN"
      start_coding_session(default_devlog_file)
    elsif @in_file_or_cmd == 'e'
      puts "CodingSession::END"
      stop_coding_session(default_devlog_file)
    elsif @in_file_or_cmd == 'i'
      puts "Save info.markdown"
      save_info("devlog.markdown")
    elsif @in_file_or_cmd == 'commit'
      puts "Commit git"
      `git commit -am "devlog"`
    elsif @in_file_or_cmd == 'push'
      puts "Push git"
      `git push`
    elsif @in_file_or_cmd == 'save'
      puts "Save info.markdown and Commit and push git"
      save_info(default_devlog_file)
      `git commit -am "devlog" && git push`
    elsif @in_file_or_cmd == 'saver'
      puts "Save info.markdown, copy devlog to README.markdown and Commit and push git"
      save_info(default_devlog_file)
      save_to_readme(default_devlog_file)
      `git commit -am "devlog" && git push`
    elsif @in_file_or_cmd == 's'
      puts is_session_open(default_devlog_file) ? "Session is open..." : "No open session."
    else
      parse_now(default_devlog_file, "Parsing #{default_devlog_file}...".green)
    end
  end
  puts "\n\n"
  puts "\nRealtime: #{time}sec\n\n"
end

# devlog run
begin
  dodo
rescue StandardError => e
  puts "\nRuntime exception: #{e.message.to_s.blue}\nBacktrace:\n#{print_backtrace(e)}"
  print_usage
end
